<?php

// this file is auto-generated by prolic/fpp
// don't edit this file manually

declare(strict_types=1);

namespace Book\Domain\Model\Review\Event;

final class ReviewWasPosted extends \Prooph\EventSourcing\AggregateChanged
{
    public const MESSAGE_NAME = 'Book\Domain\Model\Review\Event\ReviewWasPosted';

    protected $messageName = self::MESSAGE_NAME;

    protected $payload = [];

    private $id;
    private $body;
    private $rating;
    private $author;

    public function id(): \Book\Domain\Model\Review\ReviewId
    {
        if (null === $this->id) {
            $this->id = \Book\Domain\Model\Review\ReviewId::fromString($this->aggregateId());
        }

        return $this->id;
    }

    public function body(): ?\Book\Domain\Model\Review\Body
    {
        if (null === $this->body && isset($this->payload['body'])) {
            $this->body = isset($this->payload['body']) ? \Book\Domain\Model\Review\Body::fromString($this->payload['body']) : null;
        }

        return $this->body;
    }

    public function rating(): \Book\Domain\Model\Review\Rating
    {
        if (null === $this->rating) {
            $this->rating = \Book\Domain\Model\Review\Rating::fromScalar($this->payload['rating']);
        }

        return $this->rating;
    }

    public function author(): \Book\Domain\Model\Review\Author
    {
        if (null === $this->author) {
            $this->author = \Book\Domain\Model\Review\Author::fromString($this->payload['author']);
        }

        return $this->author;
    }

    public static function with(\Book\Domain\Model\Review\ReviewId $id, ?\Book\Domain\Model\Review\Body $body, \Book\Domain\Model\Review\Rating $rating, \Book\Domain\Model\Review\Author $author): self
    {
        return new self($id->toString(), [
            'body' => null === $body ? null : $body->toString(),
            'rating' => $rating->toScalar(),
            'author' => $author->toString(),
        ]);
    }

    protected function setPayload(array $payload): void
    {
        if (isset($payload['body']) && !\is_string($payload['body'])) {
            throw new \InvalidArgumentException("Value for 'body' is not a string in payload");
        }

        if (!isset($payload['rating']) || !\is_int($payload['rating'])) {
            throw new \InvalidArgumentException("Key 'rating' is missing in payload or is not a int");
        }

        if (!isset($payload['author']) || !\is_string($payload['author'])) {
            throw new \InvalidArgumentException("Key 'author' is missing in payload or is not a string");
        }

        $this->payload = $payload;
    }
}
